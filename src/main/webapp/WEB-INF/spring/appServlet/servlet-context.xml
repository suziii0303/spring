<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-4.2.xsd">
	<!-- servlet-context.xml : 스프링 웹(view) 설정 파일
	뷰(JSP 웹 페이지)와 관련 있는 빈(bean) 객체를 설정함. 즉, 컨트롤러, MultipartResolver, Intervepter, URI와 
		관련 설정을 담는 클래스를 설정함
		
		골뱅이Controller, 골뱅이RequdstMapping과 같은 애너테이션을 사용 시 필요한(bean) 객체들을 자동으로 등록함
		핸들러 어댑터의 빈(bean) 객페도 대신 등록함
		 -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- static folder설정(정적 폴더 설정)=> css, images, upload, js
	서버에서 앞서 처리될 필요가 없는 정적 리소스 파일을 처리하는 역할 수행
	웹 애플리케이션의 물리적 경로 이름을 설정하고 이 경로에 정적 리소스 파일들을 저장하면
	소스 코드나 웹 브라우저의 주소창에서 해당 리소스의 경로를 사용하령 직접 접속할 수 있음
	정적 리소스란 클라이언트에서 요청이 들어왔을 때 요청 리소스가 이미 만들어져 있어 그대로 응답하는것
	mapping : 웹 요청 경로 패턴을 설정. 컨텍스트 경로를 제회한 나머지 부분의 경로와 매핑
	location : 웹 애플리케이션 내에서 실제 요청 경로의 패턴에 해당하는 자원 위치를 설정, 위치가 여러곳이면 각 위치를 쉼표로 구분
	 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- setOrder("2") => tiles를 작동한 후에 ViewResolver를 작동하겠다라는 의미 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	</beans:bean>
	<!-- Tiles 설정 시작  -->
	<beans:bean id="tilesConfigurer"
	class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/tiles-config.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!-- UrlBasedViewResolver tilesViewResolver = new UrlBasedViewResolver() -->
	<beans:bean id="tilesViewResolver" 
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<beans:property name="order" value="1"/>	
	</beans:bean>
	<!-- Tiles 설정 끝  -->
	
	<!-- 스프링 시큐리티 애너테이션을 활성화 
	-pre-post-annotations="enabled" => 골뱅이PreAuthorize, 골뱅이PostAuthorize 활성화
	***골뱅이PreAuthorize : 특정 메소드를 실행하기 전에 role(권한) 체크
	       골뱅이PostAuthorize : 특정 메소드를 실행한 후에 role(권한) 체크
	- secured-annotations="enabled" => 골뱅이Secured를 활성화
	  Secured : 스프링 시큐리티 모듈을 지원하기 위한 애너테이면
	-->
	<security:global-method-security pre-post-annotations="enabled"
		secured-annotations="enabled"/>
	
	<!-- kr.or.ddit 패키지를 컴포넌트 스캔 대상으로 함 
	
	 -->
	<context:component-scan base-package="kr.or.ddit" />
	
	
	
</beans:beans>
