<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- xmlns:security : 스프링 시큐리티가 제공하는 XML 네임스페이스를 활성화 -->
	<!-- 인가 (authorization)(권한에서 막힘 불허)
		bean : 객체/ class="우리가 만든 클래스 / id : 우리가 만든 클래스를 인스턴스화 하여 만든 객체
	  -->
	<bean id="customAccessDenied"
		class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	
	<!-- 로그인 성공 처리
	로그인 성공 후 이력 로그를 기록(DB, 파일)과 같은 작업을 하고자 할때 사용
	-->
	<bean id="customLoginSuccess" 
		class="kr.or.ddit.security.CustomLoginSuccessHandler"></bean>
	
	<!-- 사용자가 정의한 비밀번호 함호화 처리기를 빈(객체)으로 등록 -->
	<bean id="customPasswordEncoder" 
		class="kr.or.ddit.security.CustomNoOpPasswordEncoder"></bean>
		
		<!-- 스프링 시큐리티의 UserDetailsService를 구현한 클래스를 빈(객체)으로 등록 -->
		<bean id="customUserDetailsService"
			class="kr.or.ddit.security.CustomUserDetailsService"></bean>
		
	
	<security:http>
		<!-- 접근 제한 설정 : 시큐리티 설정을 통해서 특정 URI에 대한 접근을 제한할 수 있음 
		Role : 권한 / hssRole : 권한을 갖고 있니?
		PermitAll : 누구나 접근 가능
		
		스프링 시큐리티 애너테이션
		- 스프링 시큐리티는 애너테이션을 사용하여 필요한 설정을 추가할 수 있음.
		-
		-->
<!-- 		<security:intercept-url pattern="/freeboard/list" access="permitAll"/> -->
<!-- 		<security:intercept-url pattern="/freeboard/register" access="hasRole('ROLE_MEMBER')"/> -->
<!-- 		<security:intercept-url pattern="/notice/list" access="permitAll"/> -->
<!-- 		<security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')"/> -->
		
		<!-- 폼 기반 인증 기능 사용 -->
<!-- 		<security:form-login/> -->
		<!-- 사용자가 정의한 로그인(인증 : authentication) 페이지의 URI를지정 -->
<!-- 		<security:form-login login-page="/memger/loginMember"/> -->
		<!-- 인증 성공시 처리해줄 클래스의 인스턴스 명 작성 -->
		<security:form-login login-page="/member/loginMember"
			authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- <sec:csrfInput /> 생략 가능 -->
<!-- 		<security:csrf disabled="true"/> -->
		
		<!-- 1. 접근 거부처리(사용자 정의) 
		접근 거부가 발생한 상황에 단순 메시지 처리 이상의 다양한 처리를 하고싶다면
		AccessDeniedHandler를 직접 구현해야 함
		-->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 자동로그인
		로그인하면 특정 시간 동안 다시 로그인 할 필요가 없는 기능.
		dataSource(root-context.xml)을 통해서 지정한 데이터베이스의 약속된 테이블(PERSISTEMT_LOGINS)을
		이용하여 기존 로그인 정보를 기록함
		
		token-validity-seconds : 쿠키의 유효시간(초). 604800초 = 7일
		 -->
		 <security:remember-me data-source-ref="dataSource"
		 token-validity-seconds="604800"/>
		 
		<!-- 
		1. 접근 거부 처리(시큐리티 제공)
		1) 선제조건 : 계정 / 비밀번호가 맞아야 함 => 로그인 가능
		2) 들어가려는 URL에 대한 권한이 있어야 함 
			/notice/register 요청에 member / java로 로그인한 경우[ROLE_MEMBER]
		 -->
<!-- 	<security:access-denied-handler error-page="/security/accessError"/> -->

	<!-- 로그아웃 처리. 로그아웃 후에 세션을 무효화 함 -->
	<security:logout logout-url="/logout" invalidate-session="true"
	delete-cookies="remember-me,JSESSION_ID"/>
	</security:http>
    <!-- 
    authentication : 인증(로그인)
    authorization  : 인가(로그인 후에 권한)	
    authorities    : 권한들
    
         로그인 처리.
         메모리상에 아이디와 패스워드를 지정하고 로그인을 처리함
         스프링 시큐리티(5.0.7.RELEASE버전) 5버전부터는 패스워드 암호화 처리기를 반드시 이용해야 함
         암호화 처리기를 사용하지 않으려면 noop문자열을 비밀번호 앞에 사용함     
    -->
    <security:authentication-manager>
      <security:authentication-provider user-service-ref="customUserDetailsService">
      	<!-- DB 사용을 위해  dataSource를 지정함-->
<!--       	<security:jdbc-user-service data-source-ref="dataSource"/> -->
		<!-- 
		users-by-username-query : 인증할 때 사용될 쿼리
		authorities-by-username-query : 권한을 확인할 때 사용될 쿼리
		 -->
<!-- 		<security:jdbc-user-service data-source-ref="dataSource" -->
<!-- 		users-by-username-query="SELECT USER_NO, USER_PW, ENABLED 
			FROM MEMBER WHERE USER_NO =?" -->
<!-- 		authorities-by-username-query="SELECT A.USER_NO, B.AUTH 
			FROM MEMBER A, MEMBER_AUTH B WHERE A.USER_NO= B.USER_NO AND A.USER_NO =?" -->
<!-- 		/> -->
      	<!-- 사용자가 정의한 비밀번호 암호화 처리기를 지정함 -->
      	<security:password-encoder ref="customPasswordEncoder"/>
<!--          <security:user-service> -->
<!--             <security:user name="member" password="{noop}java" -->
<!--                 authorities="ROLE_MEMBER"/> -->
<!--             <security:user name="admin" password="{noop}java" -->
<!--                 authorities="ROLE_ADMIN"/> -->
<!--          </security:user-service> -->
      </security:authentication-provider>
   </security:authentication-manager>
</beans>

